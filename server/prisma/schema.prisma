// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  STORE_OWNER
}

model User {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(60) @unique
  email     String   @unique 
  password  String
  address   String   @db.VarChar(400)
  role      Role     @default(USER)
  
  // Optional one-to-one relation with Store
  store     Store?   @relation("UserStore")

  // One-to-many relation with Rating
  ratings   Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(60) @unique
  address   String   @db.VarChar(400)

  // One-to-one relation back to User (owner)
  owner     User     @relation("UserStore", fields: [ownerId], references: [id])
  ownerId   Int      @unique // Must be unique for one-to-one

  ratings   Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int      @db.Integer

  // Many-to-one relation to User
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  // Many-to-one relation to Store
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Each user can rate each store only once
  @@unique([userId, storeId])
}
